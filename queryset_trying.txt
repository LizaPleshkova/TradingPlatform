import trading
from trading import *

from trading.models import Currency, Item, Price, WatchList, Offer, Trade, Inventory
from trading.enums import OfferCnoice

from django.db.models import Count, F, Q, Value
from datetime import datetime
from work_shift.models import WorkShift, Position, Plan
from work_shift.serializers import WSSerializer
import for_sql
from importlib import reload

python manage.py shell_plus --print-sql
pip install django-extensions



# for new app
plans = Plan.objects.all()
ws = WorkShift.objects.all()
pos = Position.objects.all()


ws = WorkShift.objects.filter(plan__id=1)
ws = WorkShift.objects.filter(plan__id=1)
pos = Position.objects.filter(workshifts__id=2).values('id') # 1 2
pos = Position.objects.filter(workshifts__id=2).only('id') # 1 2

for i in pos:
    for j in i:
        print(i)
        print(j)


#1 - work!
ws1 = WorkShift.objects.get(id=1)
serWs= WSSerializer(ws1, many=True)
serWs.data

#2
pos = Position.objects.filter(workshifts__id=OuterRef('id').only('id')
ws = WorkShift.objects.filter(plan__id=3)
ws1 = WorkShift.objects.filter(plan__id=3).order_by('id')

# with ArrayAgg
ws1 = WorkShift.objects.filter(plan__id=3).order_by('id')
ws1.annotate(assigned_pos=ArrayAgg('assigned_positions'))+


off1 = Offer.objects.all()
items = Item.objects.all()
t1 = items.filter(currency=F('item_price__currency'))+
it1 = Item.objects.filter(currency=F('item_price__currency')).only('id','code')-
t1 = Item.objects.filter(currency=F('item_price__price')+1)


# examples with F()
>>> pr1 = Price.objects.get(id=1) # 'price'==200
>>> pr1.price = F('price') + 200 # 'price' == 400 (+=200)
>>> pr1.save()
>>> pr1.date = datetime.now()
>>> pr1.save() # 'price' == 600

        # reloading the model object

>>> pr1 = Price.objects.get(id=1) # 'price' == 600
>>> pr1.date = datetime.now()
>>> pr1.save() # 'price' == 600


# количество преложений на покупку акций
item = Item.objects.annotate(count_offers=Count('item_offer'))
item = Item.objects.annotate(count_offers=Count('item_offer', filter=Q(item_offer__is_active=True)))
off_act = Count('item_offer', filter=Q(item_offer__is_active=True))
item = Item.objects.annotate(count_offers=off_act)
item = Item.objects.annotate(count_offers=Count('item_offer', filter=Q(item_offer__is_active=True))

SELECT "trading_item"."id", "trading_item"."code", "trading_item"."name", "trading_item"."currency_id", "trading_item"."description", COUNT("trading_offer"."id") FILTER (WHERE "trading_offer"."is_active")
AS "count_offers" FROM "trading_item" LEFT OUTER JOIN "trading_offer" ON ("trading_item"."id" = "trading_offer"."item_id") GROUP BY "trading_item"."id" LIMIT 21; args=()


# offers is_active=True
of1 = Offer.objects.filter(Q(is_active=True), Q(type_transaction=OfferCnoice.BUY.value))
off2 = Offer.objects.filter(type_transaction=OfferCnoice.BUY.value, is_active=True)


# 3количество is_active=True
# type_transaction=OfferCnoice.BUY.value



#tryyy
non_unique_account_type = Client.objects.filter(
    account_type=OuterRef('account_type'),(!!!!)
).exclude(pk=OuterRef('pk')).values('pk')
When(Exists(non_unique_account_type), then=Value('non unique'))


# Get the discount for each Client based on the account type
Client.objects.annotate(
   discount=Case(
       When(account_type=Client.GOLD, then=Value('5%')),
       When(account_type=Client.PLATINUM, then=Value('10%')),
       default=Value('0%'),
    ),
).values_list('name', 'discount')


Client.objects.update(
    account_type=Case(
        When(registered_on__lte=a_year_ago,
             then=Value(Client.PLATINUM)),
        When(registered_on__lte=a_month_ago,
             then=Value(Client.GOLD)),
        default=Value(Client.REGULAR)
    ),
)

UserPayment.objects.annotate(
   payment=F("payment1") + F("nds")
).aggregate(
   total=Sum("payment")
)

Author.objects.all.prefetch_realted(
   Prefetch("books", Book.objects.filter(title__startswith="А")),
)
for author in authors:
   for book in author.books.all():
       print (book)


select *
from trading_offer
full outer join trading_item on trading_item.id = trading_offer.item_id
full outer join trading_price on trading_price.item_id = trading_item.id
where trading_price.price < trading_offer.price;
